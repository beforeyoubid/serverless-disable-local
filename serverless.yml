service: serverless-basic-template

frameworkVersion: '>=3.20.0'

useDotenv: true
provider:
  name: aws
  profile: profile-byb-serverless
  runtime: nodejs14.x
  stage: ${opt:stage, 'production'}
  region: us-west-2
  deploymentMethod: direct
  timeout: 30
  memorySize: 128
  role: arn:aws:iam::102438539811:role/role-lambda
  vpc:
    securityGroupIds:
      - sg-5b57462b
    subnetIds:
      - subnet-30b5906a
  tracing:
    apiGateway: ${self:custom.${self:custom.stage}.api_gateway_xray, false}
    lambda: ${self:custom.${self:custom.stage}.lambda_xray, false}
  environment:
    NODE_ENV: ${env:NODE_ENV, 'N/A'}
    STAGE: ${opt:stage, 'production'}
    LOG_LEVEL: ${self:custom.${self:custom.stage}.log_level, env:LOG_LEVEL, self:custom.defaultLogLevel}
    API_ENV_SECRET_NAME: ${self:custom.stage}-basic-template-secrets

    SENTRY_DSN: ${self:custom.${self:custom.stage}.sentry_dsn, '<<sentry dsn>>'}

plugins:
  - serverless-plugin-scripts
  - serverless-ssm-plugin
  - serverless-plugin-tracing
  - serverless-webpack-layers
  - serverless-webpack
  - '@beforeyoubid/serverless-offline'
  - serverless-prune-plugin
  - serverless-stack-termination-protection

layers:
  lib:
    path: '.serverless'
    name: serverless-customer-insights-${self:custom.stage}
    description: node_modules
    compatibleRuntimes:
      - nodejs14.x

custom:
  stage: ${opt:stage, 'production'}
  defaultConfigType: 'cloud'
  defaultLogLevel: 'info'
  scripts:
    hooks:
      'after:deploy:finalize': 'chmod +x scripts/notify-release.sh && ./scripts/notify-release.sh'
  webpack:
    packager: yarn
    webpackConfig: './webpack/config.${env:WEBPACK_CONFIG_TYPE, self:custom.defaultConfigType}.js'
    includeModules: false
  serverless-offline:
    httpPort: 4002
    host: '0.0.0.0'
    noPrependStageInUrl: true
    useWorkerThreads: true
    allowCache: true
  prune:
    automatic: true
    includeLayers: true
    number: 3
  layerConfig:
    packager: yarn
    manageNodeFolder: true
    webpack:
      configPath: './webpack/config.modules.js'
      backupFileType: ts
      forceInclude:
        - apollo-server-lambda
        - isomorphic-fetch
      forceExclude:
        - aws-sdk

  local:
    log_level: 'debug'
    logdna_key: ''
    self_signed: 0
    sentry_dsn: ''

  dev:
    logdna_key: 96ef7e999be281f9853b744d7d93270d
    lambda_xray: true
    api_gateway_xray: true

  qa:
    logdna_key: 96ef7e999be281f9853b744d7d93270d

  uat:
    logdna_key: 96ef7e999be281f9853b744d7d93270d

  production:
    logdna_key: 96ef7e999be281f9853b744d7d93270d

functions:
  test:
    handler: src/handlers/test.default
    memorySize: 512
    layers:
      - { Ref: LibLambdaLayer }

package:
  path: artifacts
  individually: true
  exclude:
    - redirect_rules.json
    - '**/aws-sdk/**'
    - '**/@serverless/**'
    - '**/*.md'
    - '**/*.zip'
    - '**/*.sh'
    - '**/LICENCE*'
    - '**/LICENSE*'
    - 'components/**'
    - '**/react-spinners/docs/**'
    - '**/*.d.ts'
    - '**/*.d.ts.map'
    - '**/tests.html'
    - '**/sls-next-build'
